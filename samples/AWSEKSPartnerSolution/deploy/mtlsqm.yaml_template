# Â© Copyright IBM Corporation 2023
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
kind: ConfigMap
apiVersion: v1
metadata:
  name: mtlscerts
  namespace: $TARGET_NAMESPACE
data:
  mq.mqsc: |-
    DEFINE QLOCAL('APPQ') DEFPSIST(YES)
    DEFINE CHANNEL(MTLSQMCHL) CHLTYPE(SVRCONN) TRPTYPE(TCP) SSLCAUTH(REQUIRED) SSLCIPH('ANY_TLS12_OR_HIGHER')
    SET CHLAUTH('MTLSQMCHL') TYPE(SSLPEERMAP) SSLPEER('CN=tmv-mqm.co.uk') USERSRC(MAP) MCAUSER('app1') ACTION(ADD)
    ALTER QMGR SSLKEYR('/run/runmqserver/ha/tls/key')
    ALTER QMGR CERTLABL('ha')
    REFRESH SECURITY TYPE(SSL)
    DEFINE CHANNEL(TMV.APP.SVRCONN) CHLTYPE(SVRCONN) TRPTYPE(TCP) SSLCAUTH(REQUIRED) SSLCIPH('ANY_TLS12_OR_HIGHER')
    SET CHLAUTH('TMV.APP.SVRCONN') TYPE(SSLPEERMAP) SSLPEER('CN=tmv-mqm.co.uk') USERSRC(MAP) MCAUSER('app1') ACTION(ADD)
    SET CHLAUTH('TMV.APP.SVRCONN') TYPE(ADDRESSMAP) ADDRESS(*) USERSRC(CHANNEL) ACTION(ADD)
    ALTER CHANNEL(TMV.APP.SVRCONN) CHLTYPE(SVRCONN) CERTLABL('ha')
    ALTER CHANNEL(TMV.APP.SVRCONN) CHLTYPE(SVRCONN) MCAUSER('app1')
    ALTER AUTHINFO(SYSTEM.DEFAULT.AUTHINFO.IDPWOS) AUTHTYPE(IDPWOS) ADOPTCTX(YES) CHCKCLNT(OPTIONAL) CHCKLOCL(OPTIONAL) AUTHENMD(OS)
    REFRESH SECURITY TYPE(CONNAUTH)
    SET AUTHREC PRINCIPAL('app1') OBJTYPE(QMGR) AUTHADD(CONNECT,INQ)
    SET AUTHREC PROFILE('APPQ') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
    DEFINE TOPIC(TDCSPXT) TYPE(LOCAL) TOPICSTR(LINX/TDCSPXT)
    DEFINE TOPIC(TMCSTMPXT) TYPE(LOCAL) TOPICSTR(LINX/TMCSTMPXT)
    DEFINE TOPIC(TMCSIDPXT) TYPE(LOCAL) TOPICSTR(LINX/TMCSIDPXT)
    DEFINE TOPIC(TMCSTCPXT) TYPE(LOCAL) TOPICSTR(LINX/TMCSTCPXT)
    DEFINE TOPIC(TMCSTRPXT) TYPE(LOCAL) TOPICSTR(LINX/TMCSTRPXT)
    DEFINE TOPIC(VSCSPXT) TYPE(LOCAL) TOPICSTR(LINX/VSCSPXT)
    DEFINE QLOCAL(TMV.TD.UPDATES.Q) MAXDEPTH(500000) DEFPSIST(YES) PUT(ENABLED) GET(ENABLED) MSGDLVSQ(FIFO)
    DEFINE SUB(SUB_TMV.TD.UPDATES.Q_TO_TDCSPXT) TOPICSTR(LINX/TDCSPXT) DEST(TMV.TD.UPDATES.Q)
    DEFINE QLOCAL(TMV.TJM.Q) MAXDEPTH(100000) DEFPSIST(YES) PUT(ENABLED) GET(ENABLED) MSGDLVSQ(FIFO)
    DEFINE SUB(SUB_TMV.TJM.Q_TO_TMCSTMPXT) TOPICSTR(LINX/TMCSTMPXT) DEST(TMV.TJM.Q)
    DEFINE QLOCAL(TMV.TJM.TRAINID.Q) MAXDEPTH(100000) DEFPSIST(YES) PUT(ENABLED) GET(ENABLED) MSGDLVSQ(FIFO)
    DEFINE SUB(SUB_TMV.TJM.TRAINID.Q_TO_TMCSIDPXT) TOPICSTR(LINX/TMCSIDPXT) DEST(TMV.TJM.TRAINID.Q)
    DEFINE QLOCAL(TMV.TRAIN.ACTIVATION.Q) MAXDEPTH(100000) DEFPSIST(YES) PUT(ENABLED) GET(ENABLED) MSGDLVSQ(FIFO)
    DEFINE SUB(SUB_TMV.TRAIN.ACTIVATION.Q_TO_TMCSTCPXT) TOPICSTR(LINX/TMCSTCPXT) DEST(TMV.TRAIN.ACTIVATION.Q)
    DEFINE QLOCAL(TMV.TRI.Q) MAXDEPTH(100000) DEFPSIST(YES) PUT(ENABLED) GET(ENABLED) MSGDLVSQ(FIFO)
    DEFINE SUB(SUB_TMV.TRI.Q_TO_TMCSTRPXT) TOPICSTR(LINX/TMCSTRPXT) DEST(TMV.TRI.Q)
    DEFINE QLOCAL(TMV.VSTP.Q) MAXDEPTH(100000) DEFPSIST(YES) PUT(ENABLED) GET(ENABLED) MSGDLVSQ(FIFO)
    DEFINE SUB(SUB_TMV.VSTP.Q_TO_VSCSPXT) TOPICSTR(LINX/VSCSPXT) DEST(TMV.VSTP.Q)
    SET AUTHREC PROFILE('TMV.TD.UPDATES.Q') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
    SET AUTHREC PROFILE('TMV.TJM.Q') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
    SET AUTHREC PROFILE('TMV.TJM.TRAINID.Q') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
    SET AUTHREC PROFILE('TMV.TRAIN.ACTIVATION.Q') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
    SET AUTHREC PROFILE('TMV.TRI.Q') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
    SET AUTHREC PROFILE('TMV.VSTP.Q') PRINCIPAL('app1') OBJTYPE(QUEUE) AUTHADD(BROWSE,GET,INQ,PUT)
    DEFINE QLOCAL('DEAD.LETTER.QUEUE') DEFPSIST(YES) REPLACE
    ALTER QMGR DEADQ('DEAD.LETTER.QUEUE')
  mq.ini: |-
    Service:
      Name=AuthorizationService
      EntryPoints=14
      SecurityPolicy=UserExternal
---
kind: Secret
apiVersion: v1
metadata:
  name: mtlscerts
  namespace: $TARGET_NAMESPACE
data:
  tls.key: $QM_KEY
  tls.crt: $QM_CERT
  ca.crt:  $CA_CERT
type: Opaque
